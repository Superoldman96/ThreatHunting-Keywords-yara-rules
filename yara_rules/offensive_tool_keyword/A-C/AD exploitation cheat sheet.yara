rule AD_exploitation_cheat_sheet
{
    meta:
        description = "Detection patterns for the tool 'AD exploitation cheat sheet' taken from the ThreatHunting-Keywords github project" 
        author = "@mthcht"
        reference = "https://github.com/mthcht/ThreatHunting-Keywords"
        tool = "AD exploitation cheat sheet"
        rule_category = "offensive_tool_keyword"

    strings:
        // Description: Lateral Movement with Mimikatz  Overpass-the-hash a more opsec-safe version that uses the AES256 key (similar to with Rubeus above) - works for multiple Mimikatz commands
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string1 = /.{0,1000}\s\/user:.{0,1000}\s\/domain:.{0,1000}\s\/aes256:.{0,1000}\s\/run:powershell\.exe.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement with Mimikatz Overpass-the-hash (more risky than Rubeus writes to LSASS memory)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string2 = /.{0,1000}\s\/user:.{0,1000}\s\/domain:.{0,1000}\s\/ntlm:.{0,1000}\s\/run:powershell\.exe.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement with Mimikatz Golden ticket (domain admin w/ some ticket properties to avoid detection)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string3 = /.{0,1000}\s\/user:.{0,1000}\s\/domain:.{0,1000}\s\/sid:S\-1\-5\-21\-.{0,1000}\s\/krbtgt:.{0,1000}\s\/id:.{0,1000}\s\/groups:.{0,1000}\s\/startoffset:0\s\/endin:600\s\/renewmax:10080\s\/ptt.{0,1000}/ nocase ascii wide
        // Description: DCShadow is an attack that masks certain actions by temporarily imitating a Domain Controller. If you have Domain Admin or Enterprise Admin privileges in a root domain it can be used for forest-level persistence.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string4 = /.{0,1000}\s\-FakeDC\s.{0,1000}\s\-SamAccountName\s.{0,1000}\s\-Username\s.{0,1000}/ nocase ascii wide
        // Description: Targeted kerberoasting by setting SPN
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string5 = /.{0,1000}\s\-Identity\s.{0,1000}\s\-Set\s\@{serviceprincipalname\=\'.{0,1000}\'}.{0,1000}/ nocase ascii wide
        // Description: Targeted kerberoasting we need ACL write permissions to set UserAccountControl flags for the target user. Using PowerView
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string6 = /.{0,1000}\s\-Identity\s.{0,1000}\s\-XOR\s\@{useraccountcontrol\=4194304.{0,1000}/ nocase ascii wide
        // Description: Dump LSASS memory through a process snapshot (-r) avoiding interacting with it directly
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string7 = /.{0,1000}\slsass\.dmp.{0,1000}/ nocase ascii wide
        // Description: Example command to relay the hash to authenticate as local admin (if the service account has these privileges) and run calc.exe. Omit the -c parameter to attempt a secretsdump instead.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string8 = /.{0,1000}\s\-\-no\-http\-server\s\-smb2support\s\-t\s.{0,1000}\s\-c\s.{0,1000}/ nocase ascii wide
        // Description: Chisel proxying - On our attacking machine (Linux in this case) we start a Chisel server on port 80 in reverse SOCKS5 mode.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string9 = /.{0,1000}\sserver\s\-p\s80\s\-\-reverse\s\-\-socks5.{0,1000}/ nocase ascii wide
        // Description: Chisel proxying - On our attacking machine (Linux in this case) we start a Chisel server on port 80 in reverse SOCKS5 mode.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string10 = /.{0,1000}\.\/chisel\s.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement with Rubeus  More stealthy variant but requires the AES256 key (see 'Dumping OS credentials with Mimikatz' section)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string11 = /.{0,1000}\.exe\sasktgt\s\/user:.{0,1000}\s\/aes256:.{0,1000}\s\/opsec\s\/ptt.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement with Rubeus Pass the ticket to a sacrificial hidden process. allowing you to e.g. steal the token from this process (requires elevation)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string12 = /.{0,1000}\.exe\sasktgt\s\/user:.{0,1000}\s\/rc4:.{0,1000}\s\/createnetonly:.{0,1000}cmd\.exe.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement with Rubeus  Request a TGT as the target user and pass it into the current session
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string13 = /.{0,1000}\.exe\sasktgt\s\/user:.{0,1000}\s\/rc4:.{0,1000}\s\/ptt.{0,1000}/ nocase ascii wide
        // Description: Chisel proxying - on our compromised target system we connect to this server and tell it to proxy all traffic over it via the reverse SOCKS5 tunnel.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string14 = /.{0,1000}\.exe\sclient\s.{0,1000}:.{0,1000}\sR:socks.{0,1000}/ nocase ascii wide
        // Description: Unconstrained delegation Exploitation with Rubeus
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string15 = /.{0,1000}\.exe\sdump\s\/luid:0x5379f2\s\/nowrap.{0,1000}/ nocase ascii wide
        // Description: Unconstrained delegation  Exploitation with Rubeus
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string16 = /.{0,1000}\.exe\smonitor\s\/interval:5\s\/nowrap/ nocase ascii wide
        // Description: Unconstrained delegation  Exploitation with Rubeus
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string17 = /.{0,1000}\.exe\sptt\s\/ticket:.{0,1000}/ nocase ascii wide
        // Description: Rubeus Use s4u2self and s4u2proxy to impersonate the DA user to the allowed SPN
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string18 = /.{0,1000}\.exe\ss4u\s\/ticket:.{0,1000}\s\/impersonateuser:.{0,1000}\s\/msdsspn:.{0,1000}\s\/ptt.{0,1000}/ nocase ascii wide
        // Description: Rubeus access the LDAP service on the DC (for dcsync)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string19 = /.{0,1000}\.exe\ss4u\s\/user:.{0,1000}\s\/impersonateuser:.{0,1000}\s\/msdsspn:.{0,1000}\s\/altservice:ldap\s\/ptt\s\/rc4.{0,1000}/ nocase ascii wide
        // Description: Unconstrained delegation  Exploitation with Rubeus
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string20 = /.{0,1000}\.exe\striage/ nocase ascii wide
        // Description: If you have low-privileged access to a MSSQL database and no links are present you could potentially force NTLM authentication by using the xp_dirtree stored procedure to access this share. If this is successful  the NetNTLM for the SQL service account can be collected and potentially cracked or relayed to compromise machines as that service account.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string21 = /.{0,1000}\.xp_dirtree\s.{0,1000}\\.{0,1000}/ nocase ascii wide
        // Description: Crack the hash with Hashcat
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string22 = /.{0,1000}\/rockyou\.txt.{0,1000}/ nocase ascii wide
        // Description: Crack with TGSRepCrack
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string23 = /.{0,1000}10k\-worst\-pass\.txt.{0,1000}/ nocase ascii wide
        // Description: Using DAMP toolkit We add the backdoor using the Add-RemoteRegBackdoor.ps1 cmdlet from DAMP.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string24 = /.{0,1000}Add\-RemoteRegBackdoor.{0,1000}/ nocase ascii wide
        // Description: PowerShell AMSI Bypass
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string25 = /.{0,1000}Assembly\.GetType\(\'System\.Management\.Automation\.AmsiUtils\'\)\.GetField\(\'amsiInitFailed\'.{0,1000}\'NonPublic.{0,1000}Static\'\)\.SetValue\(\$null.{0,1000}\$true\).{0,1000}/ nocase ascii wide
        // Description: Chisel proxying - on our compromised target system we connect to this server and tell it to proxy all traffic over it via the reverse SOCKS5 tunnel.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string26 = /.{0,1000}chisel\.exe\s.{0,1000}/ nocase ascii wide
        // Description: Dumping secrets from a Volume Shadow Copy We can also create a Volume Shadow Copy of the SAM and SYSTEM files (which are always locked on the current system) so we can still copy them over to our local system. An elevated prompt is required for this.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string27 = /.{0,1000}copy\s\\.{0,1000}\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\sam\sC:\\.{0,1000}/ nocase ascii wide
        // Description: Dumping secrets from a Volume Shadow Copy We can also create a Volume Shadow Copy of the SAM and SYSTEM files (which are always locked on the current system) so we can still copy them over to our local system. An elevated prompt is required for this.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string28 = /.{0,1000}copy\s\\.{0,1000}\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\system\sC:\\.{0,1000}/ nocase ascii wide
        // Description: Generate EncodedCommand
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string29 = /.{0,1000}echo\s\-n\s\'cmd\s\/c\sstart\srundll32\s.{0,1000}\.dll.{0,1000}\s\|\sbase64.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement Enumeration With PowerView
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string30 = /.{0,1000}Find\-InterestingDomainAcl.{0,1000}/ nocase ascii wide
        // Description: Lateral Movement Enumeration With PowerView
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string31 = /.{0,1000}Find\-LocalAdminAccess.{0,1000}/ nocase ascii wide
        // Description: AS-REP roasting Get the hash for a roastable user using ASREPRoast.ps1
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string32 = /.{0,1000}Get\-ASREPHash.{0,1000}/ nocase ascii wide
        // Description: msds-allowedtodelegateto*
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string33 = /.{0,1000}Get\-DomainComputer\s\-TrustedToAuth\s\|\sselect\sname/ nocase ascii wide
        // Description: Abusing inter-forest trust Powersploit
        // Reference: https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainForeignGroupMember/
        $string34 = /.{0,1000}Get\-DomainForeignGroupMember.{0,1000}/ nocase ascii wide
        // Description: msds-allowedtodelegateto*
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string35 = /.{0,1000}Get\-DomainUser\s\-TrustedToAuth\s\|\sselect\suserprincipalname/ nocase ascii wide
        // Description: TightVNC password (convert to Hex then decrypt with e.g.: https://github.com/frizb/PasswordDecrypts)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string36 = /.{0,1000}Get\-ItemProperty\s\-Path\sHKLM:\\Software\\TightVNC\\Server\s\-Name\s.{0,1000}Password.{0,1000}\s\|\sselect\s\-ExpandProperty\sPassword.{0,1000}/ nocase ascii wide
        // Description: Sometimes LSASS is configured to run as a protected process (PPL). You can query this with PowerShell as follows.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string37 = /.{0,1000}Get\-ItemProperty\s\-Path\sHKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\s\-Name\s.{0,1000}RunAsPPL.{0,1000}/ nocase ascii wide
        // Description: Get cached credentials (if any)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string38 = /.{0,1000}Get\-RemoteCachedCredential.{0,1000}/ nocase ascii wide
        // Description: Get local account hashes
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string39 = /.{0,1000}Get\-RemoteLocalAccountHash.{0,1000}/ nocase ascii wide
        // Description: Get machine account hash for silver ticket attack
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string40 = /.{0,1000}Get\-RemoteMachineAccountHash.{0,1000}/ nocase ascii wide
        // Description: Automatically find all linked databases
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string41 = /.{0,1000}Get\-SqlServerLinkCrawl.{0,1000}/ nocase ascii wide
        // Description: Command execution with WMI From Linux
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string42 = /.{0,1000}impacket\-wmiexec.{0,1000}/ nocase ascii wide
        // Description: Token Manipulation Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string43 = /.{0,1000}incognito.{0,1000}\slist_tokens\s\-u.{0,1000}/ nocase ascii wide
        // Description: Token Manipulation Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string44 = /.{0,1000}incognito\.exe.{0,1000}/ nocase ascii wide
        // Description: Check for vulnerable programs and configs
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string45 = /.{0,1000}Invoke\-AllChecks.{0,1000}/ nocase ascii wide
        // Description: Exploit vulnerable service permissions (does not require touching disk)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string46 = /.{0,1000}Invoke\-ServiceAbuse.{0,1000}/ nocase ascii wide
        // Description: Scan for MSSQL misconfigurations to escalate to System Admin
        // Reference: https://stealthbits.com/blog/compromise-powerupsql-sql-attacks/
        $string47 = /.{0,1000}Invoke\-SQLAudit.{0,1000}/ nocase ascii wide
        // Description: Run command (enables XP_CMDSHELL automatically if required)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string48 = /.{0,1000}Invoke\-SQLOSCmd\s\-Instance\s.{0,1000}\s\-Command\s.{0,1000}/ nocase ascii wide
        // Description: Invoke-TokenManipulation script Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string49 = /.{0,1000}Invoke\-TokenManipulation.{0,1000}/ nocase ascii wide
        // Description: Dump LSASS memory through a process snapshot (-r) avoiding interacting with it directly
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string50 = /.{0,1000}lsass\.dmp.{0,1000}/ nocase ascii wide
        // Description: Unconstrained delegation From attacking machine entice the Domain Controller to connect using the printer bug. Binary from here https://github.com/leechristensen/SpoolSample
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string51 = /.{0,1000}MS\-RPRN\.exe\s.{0,1000}/ nocase ascii wide
        // Description: Crack with TGSRepCrack
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string52 = /.{0,1000}mssqlsvc\.kirbi.{0,1000}/ nocase ascii wide
        // Description: Example command to relay the hash to authenticate as local admin (if the service account has these privileges) and run calc.exe. Omit the -c parameter to attempt a secretsdump instead.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string53 = /.{0,1000}ntlmrelayx\s\-\-.{0,1000}/ nocase ascii wide
        // Description: Dump LSASS memory through a process snapshot (-r) avoiding interacting with it directly
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string54 = /.{0,1000}procdump\.exe.{0,1000}lsass.{0,1000}/ nocase ascii wide
        // Description: Crack the hash with Hashcat
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string55 = /.{0,1000}pwd.{0,1000}\/.{0,1000}\/rules\/best64\.rule.{0,1000}/ nocase ascii wide
        // Description: DCShadow is an attack that masks certain actions by temporarily imitating a Domain Controller. If you have Domain Admin or Enterprise Admin privileges in a root domain it can be used for forest-level persistence.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string56 = /.{0,1000}Set\-DCShadowPermissions.{0,1000}/ nocase ascii wide
        // Description: Targeted kerberoasting by setting SPN
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string57 = /.{0,1000}Set\-DomainObject.{0,1000}/ nocase ascii wide
        // Description: PowerShell AMSI Bypass Obfuscation example for copy-paste purposes
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string58 = /.{0,1000}sET\-ItEM\s\(\s\'V\'\+\'aR\'\s\+\s\s\'IA\'\s\+\s\'blE:1q2\'\s\s\+\s\'uZx\'.{0,1000}/ nocase ascii wide
        // Description: Use SharpBypassUAC e.g. from a CobaltStrike beacon
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string59 = /.{0,1000}SharpBypassUAC.{0,1000}/ nocase ascii wide
        // Description: Crack with TGSRepCrack
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string60 = /.{0,1000}tgsrepcrack\..{0,1000}/ nocase ascii wide
        // Description: Start new process with token of a specific user. Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string61 = /.{0,1000}token.{0,1000}\s\-CreateProcess\s.{0,1000}\s\-ProcessId\s.{0,1000}/ nocase ascii wide
        // Description: Start new process with token of a specific user. Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string62 = /.{0,1000}token.{0,1000}\s\-ImpersonateUser\s\-Username\s.{0,1000}/ nocase ascii wide
        // Description: Token Manipulation Tokens can be impersonated from other users with a session/running processes on the machine. Most C2 frameworks have functionality for this built-in (such as the Steal Token functionality in Cobalt Strike)
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string63 = /.{0,1000}use\sincognito.{0,1000}/ nocase ascii wide
        // Description: Dumping secrets from a Volume Shadow Copy We can also create a Volume Shadow Copy of the SAM and SYSTEM files (which are always locked on the current system) so we can still copy them over to our local system. An elevated prompt is required for this.
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string64 = /.{0,1000}wmic\sshadowcopy\scall\screate\sVolume\=\'C:\\\'.{0,1000}/ nocase ascii wide
        // Description: Exploit an unquoted service path vulnerability to spawn a beacon
        // Reference: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference
        $string65 = /.{0,1000}Write\-ServiceBinary.{0,1000}/ nocase ascii wide

    condition:
        any of them
}
